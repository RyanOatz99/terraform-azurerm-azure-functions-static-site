# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the master branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: 'Terraform'

on: push

env:
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  TF_VAR_azure_subscription: ${{ secrets.AZURE_SUBSCRIPTION_ENTERPRISE_2 }}

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production
    env:
      tf_actions_working_dir: './examples/ci-testing'

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ env.tf_actions_working_dir }}

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        # A bug in TF <= 0.14 causes the null_resource.package_build local provisioner to never return
        # TODO: Remove explicit references to 0.15 beta and bump module minimum version to 0.15
        # https://github.com/hashicorp/terraform/issues/28080
        terraform_version: 0.15.0-rc2
        # Because otherwise the wrapper makes terraform outputs a pain
        terraform_wrapper: false

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # # Generates an execution plan for Terraform
    # - name: Terraform Plan
    #   run: terraform plan

    #   # On push to master, build or change infrastructure according to Terraform configuration files
    #   # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    # - name: Terraform Apply
    #   run: |
    #     export TF_LOG='trace'
    #     terraform --version
    #     terraform apply -auto-approve
    #     TF_EXIT_CODE="$?"
    #     echo "terraform apply exited with code '$TF_EXIT_CODE'"
    #     exit $TF_EXIT_CODE

    - name: Terraform output default_hostname
      id: terraform_output_default_hostname
      run: terraform output default_hostname

      # TF_OUTPUT="`terraform output -json -no-color`"

    # - name: Test Static Site
    #   env:
    #     TF_OUTPUT: ${{ steps.terraform_outputs.outputs }}
    #   run: |
    #     echo "Currently running as `whoami`"
    #     echo "TF_OUTPUT=$TF_OUTPUT"

    #     FN_HOSTNAME="`echo "$TF_OUTPUT"`" | jq -r '.ci_static_site'.value.default_hostname`"
    #     echo "Azure Functions Hostname: '$FN_HOSTNAME'"

    #     SCRIPT_PATH="$GITHUB_WORKSPACE/scripts/wait-for-content.sh"
    #     if [ -f "$SCRIPT_PATH" ]
    #     then
    #       echo "Executing script at path '$GITHUB_WORKSPACE/scripts/wait-for-content.sh'"
    #       $SCRIPT_PATH --url="https://$FN_HOSTNAME/"
    #     else
    #       echo "Unable to find script at path '$SCRIPT_PATH'"
    #     fi

    # # Tears down the Terraform resources
    # - name: Terraform Destroy
    #   run: terraform destroy -auto-approve
